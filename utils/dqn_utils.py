import random

class GreedyEpsilon():
    """
    Create a GreedyEpsilon manager class

    Attributes:
        DISABLE_RANDOM (boolean): Disable random generation when using `.choose()`
        EPS_DECAY (float): The amount to decay epsilon each time `.choose()` returns true.
        MIN_EPS (float): The minimum allowed epsilon value. Anything below this will be clamped into the range.
    """
    def __init__(self, disable_random=False, eps_decay=0.0001, min_eps=0.05):
        self.DISABLE_RANDOM = disable_random
        self.EPS_DECAY = eps_decay
        self.MIN_EPS = min_eps

    def choose(self, eps):
        """
        Decide if the action will be random or not.

        Parameters:
            eps (float): The epsilon value. If a number generated by `random.uniform(0, 1)` is lower than eps, the function returns `True`.

        Returns:
            boolean:
                `True` if randomly chosen number (0, 1] is less than epsilon (eps).
                
                Otherwise, `False`.
            float:
                Updated eps value:
                `if rand < eps: eps = max(eps * (1 - self.EPS_DECAY), self.MIN_EPS)`
        """
        
        if self.DISABLE_RANDOM:
            return False

        rand_action_roll = 0
        rand_action_odds = eps  # Decaying epsilon

        rand_action_roll = random.uniform(0, 1)

        if rand_action_roll < rand_action_odds:
            eps = max(eps * (1 - self.EPS_DECAY), self.MIN_EPS)
            return True, eps
        
        else:
            return False, eps